# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `strings-ansi` gem.
# Please instead update this file by running `bin/tapioca gem strings-ansi`.

# source://strings-ansi-0.2.0/lib/strings/ansi/version.rb:3
module Strings
  private

  # Align text within the width.
  #
  # @api public
  # @see Strings::Align#align
  #
  # source://strings-0.2.1/lib/strings.rb:18
  def align(*args, **kws); end

  # Align text with the width.
  #
  # @api public
  # @see Strings::Align#align
  #
  # source://strings-0.2.1/lib/strings.rb:38
  def align_center(*args); end

  # Align text left within the width.
  #
  # @api public
  # @see Strings::Align#align_left
  #
  # source://strings-0.2.1/lib/strings.rb:28
  def align_left(*args); end

  # Align text with the width.
  #
  # @api public
  # @see Strings::Align#align
  #
  # source://strings-0.2.1/lib/strings.rb:48
  def align_right(*args); end

  # Check if string contains ANSI codes
  #
  # @api public
  # @return [Boolean]
  # @see Strings::ANSI#ansi?
  #
  # source://strings-0.2.1/lib/strings.rb:58
  def ansi?(string); end

  # Remove any line break characters from the text
  #
  # @api public
  # @see Strings::Fold#fold
  #
  # source://strings-0.2.1/lib/strings.rb:68
  def fold(*args); end

  # Apply padding to multiline text with ANSI codes
  #
  # @api public
  # @see Strings::Pad#pad
  #
  # source://strings-0.2.1/lib/strings.rb:78
  def pad(*args); end

  # Remove ANSI codes from the string
  #
  # @api public
  # @see Strings::ANSI#sanitize
  #
  # source://strings-0.2.1/lib/strings.rb:88
  def sanitize(string); end

  # Truncate a text at a given length
  #
  # @api public
  # @see Strings::Truncate#truncate
  #
  # source://strings-0.2.1/lib/strings.rb:98
  def truncate(*args); end

  # Wrap a text into lines at wrap length
  #
  # @api public
  # @see Strings::Wrap#wrap
  #
  # source://strings-0.2.1/lib/strings.rb:108
  def wrap(*args); end

  class << self
    # Align text within the width.
    #
    # @api public
    # @see Strings::Align#align
    #
    # source://strings-0.2.1/lib/strings.rb:18
    def align(*args, **kws); end

    # Align text with the width.
    #
    # @api public
    # @see Strings::Align#align
    #
    # source://strings-0.2.1/lib/strings.rb:38
    def align_center(*args); end

    # Align text left within the width.
    #
    # @api public
    # @see Strings::Align#align_left
    #
    # source://strings-0.2.1/lib/strings.rb:28
    def align_left(*args); end

    # Align text with the width.
    #
    # @api public
    # @see Strings::Align#align
    #
    # source://strings-0.2.1/lib/strings.rb:48
    def align_right(*args); end

    # Check if string contains ANSI codes
    #
    # @api public
    # @return [Boolean]
    # @see Strings::ANSI#ansi?
    #
    # source://strings-0.2.1/lib/strings.rb:58
    def ansi?(string); end

    # Remove any line break characters from the text
    #
    # @api public
    # @see Strings::Fold#fold
    #
    # source://strings-0.2.1/lib/strings.rb:68
    def fold(*args); end

    # Apply padding to multiline text with ANSI codes
    #
    # @api public
    # @see Strings::Pad#pad
    #
    # source://strings-0.2.1/lib/strings.rb:78
    def pad(*args); end

    # Remove ANSI codes from the string
    #
    # @api public
    # @see Strings::ANSI#sanitize
    #
    # source://strings-0.2.1/lib/strings.rb:88
    def sanitize(string); end

    # Truncate a text at a given length
    #
    # @api public
    # @see Strings::Truncate#truncate
    #
    # source://strings-0.2.1/lib/strings.rb:98
    def truncate(*args); end

    # Wrap a text into lines at wrap length
    #
    # @api public
    # @see Strings::Wrap#wrap
    #
    # source://strings-0.2.1/lib/strings.rb:108
    def wrap(*args); end
  end
end

# Helper functions for handling ANSI escape sequences
#
# source://strings-ansi-0.2.0/lib/strings/ansi/version.rb:4
module Strings::ANSI
  private

  # Check if string contains ANSI codes
  #
  # @api public
  # @example
  #   Strings::ANSI.ansi?("\e[33mfoo\[e0m")
  #   # => true
  # @param string [String] the string to check
  # @return [Boolean]
  #
  # source://strings-ansi-0.2.0/lib/strings/ansi.rb:45
  def ansi?(string); end

  # Check if string contains only ANSI codes
  #
  # @api public
  # @example
  #   Strings::ANSI.only_ansi?("\e[33mfoo\[e0m")
  #   # => false
  #
  #   Strings::ANSI.only_ansi?("\e[33m")
  #   # => false
  # @param string [String] the string to check
  # @return [Boolean]
  #
  # source://strings-ansi-0.2.0/lib/strings/ansi.rb:65
  def only_ansi?(string); end

  # Return a copy of string with ANSI characters removed
  #
  # @api public
  # @example
  #   Strings::ANSI.sanitize("\e[33mfoo\[e0m")
  #   # => "foo"
  # @param string [String]
  # @return [String]
  #
  # source://strings-ansi-0.2.0/lib/strings/ansi.rb:28
  def sanitize(string); end

  class << self
    # Check if string contains ANSI codes
    #
    # @api public
    # @example
    #   Strings::ANSI.ansi?("\e[33mfoo\[e0m")
    #   # => true
    # @param string [String] the string to check
    # @return [Boolean]
    #
    # source://strings-ansi-0.2.0/lib/strings/ansi.rb:45
    def ansi?(string); end

    # Check if string contains only ANSI codes
    #
    # @api public
    # @example
    #   Strings::ANSI.only_ansi?("\e[33mfoo\[e0m")
    #   # => false
    #
    #   Strings::ANSI.only_ansi?("\e[33m")
    #   # => false
    # @param string [String] the string to check
    # @return [Boolean]
    #
    # source://strings-ansi-0.2.0/lib/strings/ansi.rb:65
    def only_ansi?(string); end

    # Return a copy of string with ANSI characters removed
    #
    # @api public
    # @example
    #   Strings::ANSI.sanitize("\e[33mfoo\[e0m")
    #   # => "foo"
    # @param string [String]
    # @return [String]
    #
    # source://strings-ansi-0.2.0/lib/strings/ansi.rb:28
    def sanitize(string); end
  end
end

# The regex to match ANSI codes
#
# source://strings-ansi-0.2.0/lib/strings/ansi.rb:15
Strings::ANSI::ANSI_MATCHER = T.let(T.unsafe(nil), String)

# The control sequence indicator
#
# source://strings-ansi-0.2.0/lib/strings/ansi.rb:9
Strings::ANSI::CSI = T.let(T.unsafe(nil), String)

# The code for reseting styling
#
# source://strings-ansi-0.2.0/lib/strings/ansi.rb:12
Strings::ANSI::RESET = T.let(T.unsafe(nil), String)

# source://strings-ansi-0.2.0/lib/strings/ansi/version.rb:5
Strings::ANSI::VERSION = T.let(T.unsafe(nil), String)

# source://strings-0.2.1/lib/strings/version.rb:4
Strings::VERSION = T.let(T.unsafe(nil), String)
